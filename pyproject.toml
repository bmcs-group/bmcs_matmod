[build-system]
requires = ["setuptools>=61.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "bmcs_matmod"
version = "0.1.0"
description = "Suite of utilities for material model development."
readme = "README.md"
authors = [
    { name = "BMCS-Group", email = "rostislav.chudoba@rwth-aachen.de" }
]
license = { file = "LICENSE" }
requires-python = ">=3.6"
dependencies = [
    "numpy",
    "sympy",
    "traits",
    "matplotlib",
    "scipy",
    # Network and serialization support
    "requests",
    "jsonschema",
]

[project.urls]
Homepage = "https://github.com/bmcs-group/bmcs_matmod"

[tool.setuptools.packages.find]
where = ["."]
exclude = ["tests*"]

[project.optional-dependencies]
dev = [
    "pytest",
    "pytest-cov",
    "twine",
]
aiida = [
    "aiida-core>=2.6.0",
    "aiida-shell",
]

[project.scripts]
# CLI entry points for GSM material modeling
gsm-cli = "bmcs_matmod.gsm_lagrange.cli_gsm:main"
gsm-server = "bmcs_matmod.gsm_lagrange.cli_gsm:start_network_server"

# AiiDA entry points for workchain integration
[project.entry-points."aiida.calculations"]
"gsm.simulation" = "bmcs_matmod.aiida_plugins.calculations:GSMSimulationCalculation"

[project.entry-points."aiida.parsers"]
"gsm.parser" = "bmcs_matmod.aiida_plugins.parsers:GSMParser"

[project.entry-points."aiida.workflows"]
"gsm.monotonic" = "bmcs_matmod.aiida_plugins.workchains:GSMMonotonicWorkChain"
"gsm.fatigue" = "bmcs_matmod.aiida_plugins.workchains:GSMFatigueWorkChain"
"gsm.sn_curve" = "bmcs_matmod.aiida_plugins.workchains:GSMSNCurveWorkChain"

[project.entry-points."aiida.data"]
"gsm.material" = "bmcs_matmod.aiida_plugins.data:GSMMaterialData"
"gsm.loading" = "bmcs_matmod.aiida_plugins.data:GSMLoadingData"

[tool.pylance]
typeCheckingMode = "basic"
reportCallIssue = false
reportOperatorIssue = false      # This should fix (-self.phi_) issues
reportUnknownMemberType = false
reportAttributeAccessIssue = false
reportUnknownArgumentType = false
reportReturnType = false
reportUnknownVariableType = false
reportMissingTypeStubs = false
reportPrivateImportUsage = false
reportArgumentType = false

[tool.pyright]
typeCheckingMode = "basic"
reportCallIssue = false
reportOperatorIssue = false      # Backup for Pyright
reportUnknownMemberType = false
reportAttributeAccessIssue = false
reportUnknownArgumentType = false
reportReturnType = false
reportUnknownVariableType = false
reportMissingTypeStubs = false
reportPrivateImportUsage = false
reportArgumentType = false
